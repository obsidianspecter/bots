

## Simple Chatbot Jupyter Notebook

This Jupyter notebook demonstrates the creation and implementation of a simple chatbot using the `transformers` library by Hugging Face. The notebook utilizes a pre-trained model to facilitate conversations and showcases how to interact with the model to generate responses. Below is a thorough explanation of each section of the notebook.

### 1. **Introduction**
   - **Overview**: This notebook demonstrates the use of the `facebook/blenderbot-400M-distill` model to create a simple chatbot. The model is part of the `transformers` library by Hugging Face, which provides state-of-the-art pre-trained models for natural language processing tasks.

### 2. **Setup and Initialization**
   - **Import Libraries**: The required libraries are imported to use the pre-trained model and tokenizer.
     ```python
     from transformers import AutoTokenizer, AutoModelForSeq2SeqLM
     ```

### 3. **Load Pre-trained Model and Tokenizer**
   - **Model and Tokenizer Loading**: The notebook loads the `facebook/blenderbot-400M-distill` model and its corresponding tokenizer.
     ```python
     model_name = "facebook/blenderbot-400M-distill"
     model = AutoModelForSeq2SeqLM.from_pretrained(model_name)
     tokenizer = AutoTokenizer.from_pretrained(model_name)
     ```

### 4. **Initialize Conversation History**
   - **Conversation History**: An empty list is initialized to store the history of the conversation.
     ```python
     conversation_history = []
     ```

### 5. **Prepare Inputs for the Model**
   - **History String**: The conversation history is joined into a single string to maintain context.
     ```python
     history_string = "\n".join(conversation_history)
     ```
   - **Input Text**: A sample input text is defined.
     ```python
     input_text = "hello, how are you doing?"
     ```

### 6. **Encode Inputs**
   - **Tokenization**: The input text and conversation history are tokenized and converted to tensors suitable for the model.
     ```python
     inputs = tokenizer.encode_plus(history_string, input_text, return_tensors="pt")
     ```

### 7. **Generate Response**
   - **Model Inference**: The model generates a response based on the input tensors.
     ```python
     outputs = model.generate(**inputs)
     ```
   - **Decode Response**: The generated response is decoded into a human-readable string.
     ```python
     response = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()
     ```

### 8. **Update Conversation History**
   - **Append to History**: The input text and the model's response are added to the conversation history.
     ```python
     conversation_history.append(input_text)
     conversation_history.append(response)
     ```

### 9. **Interactive Chat Loop**
   - **Chat Loop**: A while loop is implemented to enable continuous interaction with the chatbot.
     ```python
     while True:
         history_string = "\n".join(conversation_history)
         input_text = input(">")
         inputs = tokenizer.encode_plus(history_string, input_text, return_tensors="pt")
         outputs = model.generate(**inputs)
         response = tokenizer.decode(outputs[0], skip_special_tokens=True).strip()
         conversation_history.append(input_text)
         conversation_history.append(response)
         print(response)
     ```

### Usage Instructions
1. **Setup Environment**: Install required libraries using `pip install transformers` or by referring to the requirements specified.
2. **Run Notebook**: Open the notebook and execute cells sequentially to initialize the model and interact with the chatbot.
3. **Interact with Chatbot**: Use the provided interactive chat loop to engage in a conversation with the chatbot.

### Prerequisites
- **Python**: Ensure Python is installed.
- **Jupyter Notebook**: Install Jupyter Notebook to run the .ipynb file.
- **Dependencies**: Install dependencies listed in the notebook or via `pip`.

### File Structure
- **Notebooks**: Jupyter notebooks containing code and explanations.
- **Data**: Dataset files used for training and testing the chatbot (if any).
- **Models**: Pre-trained models or saved model states.

---
